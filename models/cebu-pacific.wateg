Model CebuPacific

ENTITIES
object Ticket {
       FareType:fareType
       int:passengerID
       Sector:sector1
       Sector:sector2   
}

object Sector {
       Flight:flight
       int:etd //Estimated time of departure
       int:std //schedule time of departure (can vary due to delays)
       BookingClass:bookingClass
       bool:promo
       Status:status
       int:cancelTime
       int:cost
}

object PassengerFund {
       int:balance
       int:passengerID
}

enum FareType {
     Rebookable
     NonRebookable
}

enum Status {
     Scheduled
     CancelledByAirline
     CancelledOtherReason
     CancelledByPassenger
     CancelledInvolountary
     CancelledByDelay
     Refunded
     Flown
}

enum BookingClass {
     A    
     B    
     C    
     D    
     E    
     F    
     G    
     H    
     I    
     J    
     K    
     L    
     M    
     N    
     O    
     P    
     Q    
     S    
     T    
     V    
     W    
     X    
     Y    
     Z    
} 

enum Flight {
     C892
     C945
     C536
     C654
}


enum CancellationReason {
     Safety
     PassengerIllness
     Other
}

PAGES

page Y {
	a
}

OPERATIONS

operation partialCancellation {
	  input: Ticket:ticket CancellationReason:reason int:currentTime Sector:sector int:time
	  creates:
	  modifies: Ticket:ticket
	  next:refund	//Partial cancellation should always be followed by refund
	  group reasons {
	  	rule forceMajeur1 { //9.3.3
		     pre: reason == CancellationReason::Safety AND sector == ticket.sector1;
		     post: ticket.sector1.status == Status::CancelledByAirline AND ticket.sector1.status.cancelTime == time;
		}
		rule forceMajeur2 { //9.3.3
		     pre: reason == CancellationReason::Safety AND sector == ticket.sector2;
		     post: ticket.sector2.status == Status::CancelledByAirline AND ticket.sector2.cancelTime == time;
		}		
		rule illness1 {
		     pre:  reason == CancellationReason::PassengerIllness AND  sector == ticket.sector1;
		     post: ticket.sector1.status == Status::CancelledInvolountary AND ticket.sector1.cancelTime == time;
		}
		rule illness2 {
		     pre: reason == CancellationReason::PassengerIllness AND sector == ticket.sector2;
		     post: ticket.sector2.status == Status::CancelledInvolountary AND ticket.sector2.cancelTime == time;
		}
		rule delay1 {
			 pre: ticket.sector1.std > ticket.sector1.etd + 1;
			 post: ticket.sector1.status == Status::CancelledByDelay AND ticket.sector1.cancelTime == time;
		}
		rule delay2 {
			pre: ticket.sector2.std > ticket.sector2.etd + 1;
			post: ticket.sector2.status == Status::CancelledByDelay AND ticket.sector2.cancelTime == time;
		}	
		rule other1 { //9.3.4
		      pre: reason == CancellationReason::Other AND sector == ticket.sector1;
		      post: ticket.sector1.status == Status::CancelledOtherReason AND ticket.sector1.cancelTime == time;
		}
		rule other2 { //9.3.4
		      pre: reason == CancellationReason::Other AND sector == ticket.sector2;
		      post: ticket.sector2.status == Status::CancelledOtherReason AND ticket.sector2.cancelTime == time;
		}
				
	  }		    
}

operation makeSector {
	  input: Flight:flight  int:etd BookingClass:class bool:promo
	  creates: Sector:sector
	  modifies:
	  group b {
	  	rule build {
		     pre: true;
		     post: sector.flight == flight AND sector.etd == etd AND sector.std == etd AND sector.bookingClass == class AND sector.promo == promo 
		     	     AND sector.status == Status::Scheduled;
		}
	  }	  

}

operation addSector1 {
	  input: Sector:sector Ticket:ticket PassengerFund:fund
	  creates: 
	  modifies: Ticket:ticket PassengerFund:fund
	  group main {
	  	rule addsector1 {
		     pre: fund.balance > sector.cost;
		     post: ticket.sector1 == sector AND fund.balance == fund.balance@ - sector.cost;
		}		
	  }	  
}

operation addSector2 {
	  input: Sector:sector Ticket:ticket PassengerFund:fund
	  creates: 
	  modifies: Ticket:ticket PassengerFund:fund
	  group main {
	  	rule addsector2 {
		     pre: fund.balance > sector.cost;
		     post: ticket.sector2 == sector AND fund.balance == fund.balance@ - sector.cost;
		}		
	  }	  
}


operation rebookPartial {
	  input: Ticket:ticket int:currentTime PassengerFund:fund int:rebookingFee Sector:newSector
	  creates:
	  modifies: Ticket:ticket PassengerFund:fund
	  group clause81a { //Passenger changes reservation with
	  	rule rebookingSector1 {
		  pre: ticket.fareType == FareType::Rebookable AND currentTime + 4 < ticket.sector1.etd AND fund.balance > rebookingFee AND fund.balance > (newSector.cost - ticket.sector1.cost) AND newSector.etd < currentTime+720; //30 days
	      post: newSector == ticket.sector1 AND  fund.balance == fund.balance@ - (newSector.cost - ticket.sector1.cost@); 
		}
		rule rebookingSector2 {
		  pre: ticket.fareType == FareType::Rebookable AND currentTime + 4 > ticket.sector2.etd AND fund.balance > rebookingFee AND fund.balance > (newSector.cost - ticket.sector2.cost) AND newSector.etd < currentTime+720; //30 days
	      post: newSector == ticket.sector2 AND  fund.balance == fund.balance@ - (newSector.cost - ticket.sector2.cost@); 
		}		
	  }
	  
	  group clause81b {
	  	rule involountary1 {
		     pre: ticket.sector1.status == Status::CancelledInvolountary AND newSector.etd < currentTime + 720; 
		     post: newSector == ticket.sector1;
		}
		
		rule involountary2 {
		     pre: ticket.sector2.status == Status::CancelledInvolountary AND newSector.etd < currentTime + 720; 
		     post: newSector == ticket.sector2;
		}
			
		rule delay1 {
		     pre: ticket.sector1.std > ticket.sector1.etd + 3 AND newSector.etd < currentTime + 720 ;
		     post: newSector == ticket.sector1;
		}
		
		rule delay2 {
		     pre: ticket.sector2.std > ticket.sector2.etd + 3 AND newSector.etd < currentTime + 720 ;
		     post: newSector == ticket.sector2;
		}	
	  }	  	  
}

operation refund {
	  input: Ticket:ticket PassengerFund:fund int:currentTime int:refundFee
	  creates:
	  modifies: PassengerFund:fund Ticket:ticket
	  group clause82 {
	    	rule partADelay1 {
	  	     pre:  ticket.sector1.status == Status::CancelledByDelay;
		     post: ticket.sector1.status == Status::Refunded AND fund.balance == fund.balance@ + ticket.sector1.cost - refundFee;
	   		}
	   		
	   		rule partADelay2 {
	  	     pre:  ticket.sector2.status == Status::CancelledByDelay;
		     post: ticket.sector2.status == Status::Refunded AND fund.balance == fund.balance@ + ticket.sector2.cost - refundFee;
	   		}
	   				
			rule CancellationByAirline1 {
		     pre:   ticket.sector1.status == Status::CancelledByAirline;
		     post:  ticket.sector1.status == Status::Refunded AND fund.balance == fund.balance@ + ticket.sector1.cost;
		 	}		
		 	
		 	rule CancellationByAirline2 {
		     pre:   ticket.sector2.status == Status::CancelledByAirline;
		     post:  ticket.sector2.status == Status::Refunded AND fund.balance == fund.balance@ + ticket.sector2.cost;
		 	}
		 	
			rule CancellationByOtherReason1 {
		     pre:   ticket.sector1.status == Status::CancelledOtherReason;
		     post:  ticket.sector1.status == Status::Refunded AND fund.balance == fund.balance@ + ticket.sector1.cost;
		 	}		
		 	
		 	rule CancellationByOtherReason2 {
		     pre:   ticket.sector2.status == Status::CancelledOtherReason;
		     post:  ticket.sector2.status == Status::Refunded AND fund.balance == fund.balance@ + ticket.sector2.cost;
		 	}

			rule CancellationByInvoluntary1 {
		     pre:   ticket.sector1.status == Status::CancelledInvolountary;
		     post:  ticket.sector1.status == Status::Refunded AND fund.balance == fund.balance@ + ticket.sector1.cost;
		 	}		
		 	
		 	rule CancellationByInvoluntary2 {
		     pre:   ticket.sector2.status == Status::CancelledInvolountary;
		     post:  ticket.sector2.status == Status::Refunded AND fund.balance == fund.balance@ + ticket.sector2.cost;
		 	}
	  }	  
}

operation purchaseTicket {
	  input: FareType:fareType PassengerFund:fund
	  creates: Ticket:ticket
	  modifies: PassengerFund:fund
	  group main {
	  	rule r {
		  	 pre: true; 
		     post: ticket.fareType == fareType AND ticket.passengerID == fund.passengerID;
		}
	  }	  
}

operation delayFlight {
	  input: Ticket:ticket int:delay
	  creates:
	  modifies: Ticket:ticket
	  group main {
	  	rule main1 {
		     pre: ticket.sector1.status == Status::Scheduled;
		     post: ticket.sector1.std == ticket.sector1.std@ + delay;
		}
	  	rule main2 {
		     pre: ticket.sector2.status == Status::Scheduled;
		     post: ticket.sector2.std == ticket.sector2.std@ + delay;
		}
	  }
}

operation flyPart {
	  input: Ticket:ticket
	  creates:
	  modifies: Ticket:ticket
	  group main {
	  	rule main1 {
		     pre: true;
		     post: ticket.sector1.status == Status::Flown;
		}
		
		rule main2 {
		     pre: true;
		     post: ticket.sector2.status == Status::Flown;
		}		
	  }	
}

operation createFund {
	  input: int:passengerID int:initialBalance
	  creates: PassengerFund:fund
	  modifies:

	  group create {
      	  rule create {
      	   pre: true;
	  	   post: fund.passengerID == passengerID AND fund.balance == initialBalance;
          }     
      }
}

TRIGGERS

