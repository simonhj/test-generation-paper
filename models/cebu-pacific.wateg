Model CebuPacific

ENTITIES
object Ticket {
       int:fare
       int:passengerID
       Set[Sector]:sectors
}

object Sector {
       Flight:flight
       aint:etd //Estimated time of departure
       int:std //schedule time of departure
       Class:bookingClass
       bool:promo
       Status:status
       int:cancelTime
}

object PassengerFund {
       int:balance
       int:passengerID
}

enum Status {
     Scheduled
     CancelledByAirline
     CancelledOtherReason
     Flown
}

enum Class {
     A    
     B    
     C    
     D    
     E    
     F    
     G    
     H    
     I    
     J    
     K    
     L    
     M    
     N    
     O    
     P    
     Q    
     S    
     T    
     V    
     W    
     X    
     Y    
     Z    
} 

enum Flight {
     892
     945
     536
     654
}


enum CancellationReason {
     Safety
     PassengerIllness
     Other
}

PAGES

page Y {
	a
}

OPERATIONS

operation cancellation {	
	  input: Ticket:ticket CancellationReason:reason int:currentTime
	  creates:
	  modifies: Ticket:ticket
	  group reasons {
	  	rule forceMajeur { //9.3.3
		     pre: reason == CancellationReason::Safety
		     post: forall(ticket.sectors)s : s.status == Status::CancelledByAirline 
		}
		rule other { //9.3.4
		      pre: reason == CancellationReason::Other 
		      post: forall(ticket.sectors)s : s.status == Status::CancelledOtherReason
		}		
	  }		    
}  

operation partialCancellation {

}

operation rebook {
	  intput: Ticket:ticket int:currentTime PassengerFund:fund int:time
	  creates:
	  modifies: Ticket:ticket PassengerFund:fund
	  group cancelEntire {
	  	rule cancelSafety {
		     pre:  ticket.sectors.status == Status::CancelledByAirline
		     post: 
		}	
		rule cancelOther {
		     pre:  ticket.sectors.status == Status::CancelledOtherReason 
		     post:
		}	
	  }		
}

operation makeSector {
	  intput: Flight:flight  int:etd Class:class bool:promo
	  creates: Sector:sector
	  modifies:
	  group b {
	  	rule build {
		     pre: 
		     post: Sector.flight == flight AND sector.etd = etd AND sector.std == etd AND sector.bookingClass == Class AND sector.promo == promo 
		     	     AND sector.status == Status::Scheduled
		}
	  }	  

}

operation addSector {
	  input: Sector:sector Ticket:ticket
	  creates: 
	  modifies: ticket
	  group {
	  	rule {
		     pre:
		     post: ticket.sectors == add(Ticket.sectors@,sector) 
		}		
	  }	  
}

operation rebookPartial {

}

operation purchaseTicket {
	  intput: Set[Sector]:sectors PassengerFund:fund int:price
	  creates: Ticket:ticket
	  modifies: fund
	  group {
	  	rule r {
	  	     pre: fund.balance >= price
		     post: ticket.fare == price AND ticket.passengerID == fund.passengerID AND ticket.sectors == sectors 
		}
	  }	  
}

operation createFlight {

}

operation cancelFlight {

}

operation delayedFlight {

}

operation flyPart {

}

operation createFund {
input: int:passengerID int:initialBalance
creates: PassengerFund:fund
modifies:

group create {
      rule create {
      	   pre:
	   post: fund.passengerID == passengerID AND fund.balance == initialBalance
      }     
}

TRIGGERS

